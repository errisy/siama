"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//Client file generated by RPC Compiler.
const core_1 = require("@angular/core");
const http_1 = require("@angular/http");
require("rxjs/add/operator/toPromise");
require("rxjs/add/operator/map");
require("rxjs/add/operator/catch");
const rpc = require("errisy-rpc");
/**
 * the RPC service example.
 */
let AppService = class AppService {
    constructor($_Angular2HttpClient) {
        this.$_Angular2HttpClient = $_Angular2HttpClient;
        /**Please set Base URL if this Remote Procedure Call is not sent to the default domain address.*/
        this.$baseURL = "";
    }
    /**
     * File upload
     * @param file
     */
    upload(file) {
        return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-upload', rpc.buildClientData(file)).map(rpc.Converter.convertStringResponse).toPromise();
    }
    get "upload url"() {
        return this.$baseURL + "/app/app.rpc.js?AppService-upload&";
    }
    /**
     * load report by id
     * @param file
     */
    loadReport(id) {
        return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-loadReport', rpc.buildClientData(id)).map(rpc.Converter.convertJsonResponse).toPromise();
    }
    get "loadReport url"() {
        return this.$baseURL + "/app/app.rpc.js?AppService-loadReport&";
    }
    /**
     * save report
     * @param report
     */
    saveReport(value) {
        return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-saveReport', rpc.buildClientData(value)).map(rpc.Converter.convertBooleanResponse).toPromise();
    }
    get "saveReport url"() {
        return this.$baseURL + "/app/app.rpc.js?AppService-saveReport&";
    }
    /**
     * delete the report.
     * @param InspectionNumber
     */
    deleteReport(InspectionNumber) {
        return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-deleteReport', rpc.buildClientData(InspectionNumber)).map(rpc.Converter.convertBooleanResponse).toPromise();
    }
    get "deleteReport url"() {
        return this.$baseURL + "/app/app.rpc.js?AppService-deleteReport&";
    }
};
AppService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], AppService);
exports.AppService = AppService;
//# sourceMappingURL=app.client.js.map