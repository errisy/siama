//Client file generated by RPC Compiler.
import { Injectable } from '@angular/core';
import { Http, Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Observer } from 'rxjs/Observer';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import * as rpc from 'errisy-rpc';

import { Report } from './report.type';

import * as fs from 'fs';
/**
 * the RPC service example.
 */
@Injectable()
export class AppService {
	constructor(private $_Angular2HttpClient: Http){
	}
	/**Please set Base URL if this Remote Procedure Call is not sent to the default domain address.*/
	public $baseURL: string = "";
		/**
		 * File upload
		 * @param file 
		 */
		public upload(file: File): Promise<string>{
			return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-upload', rpc.buildClientData(file)).map(rpc.Converter.convertStringResponse).toPromise();
		}
		public get "upload url"():string{
			return this.$baseURL + "/app/app.rpc.js?AppService-upload&";
		}
		/**
		 * load report by id
		 * @param file 
		 */
		public loadReport(id: string): Promise<Report>{
			return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-loadReport', rpc.buildClientData(id)).map(rpc.Converter.convertJsonResponse).toPromise();
		}
		public get "loadReport url"():string{
			return this.$baseURL + "/app/app.rpc.js?AppService-loadReport&";
		}
		/**
		 * save report
		 * @param report 
		 */
		public saveReport(value: Report): Promise<boolean>{
			return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-saveReport', rpc.buildClientData(value)).map(rpc.Converter.convertBooleanResponse).toPromise();
		}
		public get "saveReport url"():string{
			return this.$baseURL + "/app/app.rpc.js?AppService-saveReport&";
		}
		/**
		 * delete the report.
		 * @param InspectionNumber 
		 */
		public deleteReport(InspectionNumber: string): Promise<boolean>{
			return this.$_Angular2HttpClient.post(this.$baseURL + '/app/app.rpc.js?AppService-deleteReport', rpc.buildClientData(InspectionNumber)).map(rpc.Converter.convertBooleanResponse).toPromise();
		}
		public get "deleteReport url"():string{
			return this.$baseURL + "/app/app.rpc.js?AppService-deleteReport&";
		}
}
